/**
 * Created on 2019/3/10
 * <p>
 * 单例模式（Singleton Pattern）是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。
 * <p>
 * 隐藏其所有的构造方法。
 * <p>
 * 属于创建型模式。
 * <p>
 * 适用场景：
 * 确保任何情况下都绝对只有一个实例。
 * <p>
 * 经典案例：
 * ServletContext、ServletConfig、ApplicationContext、DBPool
 * <p>
 * 特征：
 * 构造方法私有
 * 只有一个全局访问点
 * <p>
 * 单例模式的常见写法：
 * 1、饿汉式单例
 * 2、懒汉式单例
 * 3、注册式单例
 * 4、ThreadLocal单例
 * <p>
 * 单例结构总结：
 * 1、私有化构造器
 * 2、保证线程安全
 * 3、延迟加载
 * 4、防止序列化和反序列化破坏单例
 * 5、防御反射攻击单例
 * <p>
 * 优点：
 * 在内存中只有一个实例，减少了内存开销，可以避免对资源的多重占用；
 * 设置全局访问点，严格控制访问；
 * <p>
 * 缺点：
 * 没有接口，扩展困难；如果要扩展单例对象，只有修改代码，没有其他途径——不符合开闭原则
 */
package com.twins.designpattern.singleton;