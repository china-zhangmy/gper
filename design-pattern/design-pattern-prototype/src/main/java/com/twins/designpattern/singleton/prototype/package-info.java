/**
 * Created on 2019/3/11
 * <p>
 * 原型模式（Prototype Pattern）是指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
 * <p>
 * 调用者不需要知道任何创建细节，不调用构造函数，而是直接利用字节码复制。
 * <p>
 * 属于创建型模式。
 * <p>
 * 分类：
 * 浅克隆——shallow clone
 * 深克隆——deep clone
 * <p>
 * 适用场景：
 * 1、类初始化消耗资源比较多；
 * 2、new产生的一个对象需要非常繁琐的过程（数据准备、访问权限等）；
 * 3、构造函数比较复杂；
 * 4、循环体中生产大量对象时，可读性下降；
 * <p>
 * 总结：
 * 原型模式就是如何快速构建对象的方法总结。
 * 简单工厂将getter、setter封装到某个方法中；
 * JDK提供的实现Cloneable接口，实现快速复制。
 * <p>
 * Spring： @Scope="prototype"
 * <p>
 * 缺点：
 * 必须配备克隆（或者可拷贝）方法；
 * 对克隆复杂对象或者对克隆出的对象进行复杂改造时，易带来风险；
 * 深拷贝、浅拷贝要运用得当。
 */
package com.twins.designpattern.singleton.prototype;